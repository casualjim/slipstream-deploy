#!/usr/bin/env bash

#MISE description="Fetch Vultr Kubernetes kubeconfig and save to partial kubeconfigs directory"
#
# This task fetches the kubeconfig for the named Vultr cluster and writes it
# into a partial kubeconfig directory (default: ~/.kube/partial). It will not
# overwrite the user's main ~/.kube/config. Use the merge task to combine
# partial kubeconfigs.
#
#USAGE flag "-c --cluster <cluster>" help="The name of the cluster in vultr" {
#USAGE }
#USAGE flag "--partial-dir <dir>" help="Directory to write partial kubeconfigs" {
#USAGE   default "~/.kube/partial"
#USAGE }

set -euo pipefail

if [ -z "${usage_cluster:-}" ]; then
  echo "Cluster name is required" >&2
  exit 1
fi

PARTIAL_DIR="${usage_partial_dir:-${KUBECONFIG_PARTIAL:-$HOME/.kube/partial}}"
mkdir -p "$PARTIAL_DIR"

cluster_id="$(vultr kubernetes list --output json | jq -r ".vke_clusters[] | select(.label == \"$usage_cluster\") | .id")"
if [ -z "$cluster_id" ] || [ "$cluster_id" = "null" ]; then
  echo "Cluster not found: $usage_cluster" >&2
  exit 2
fi

echo "Fetching kubeconfig for cluster: $usage_cluster (ID: $cluster_id)"

# Write to a uniquely named file inside partial dir (do not clobber)
out_file="$PARTIAL_DIR/kubeconfig-${cluster_id}.yaml"
if [[ -e "$out_file" ]]; then
  ts="$(date +%s)"
  out_file="$PARTIAL_DIR/kubeconfig-${cluster_id}.${ts}.yaml"
fi

if ! vultr kubernetes kubeconfig "$cluster_id" | base64 -d > "$out_file"; then
  echo "Failed to fetch or decode kubeconfig for cluster $usage_cluster" >&2
  rm -f "$out_file"
  exit 3
fi
chmod 600 "$out_file"
echo "Wrote partial kubeconfig -> $out_file"
