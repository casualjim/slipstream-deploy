#!/usr/bin/env bash

set -euo pipefail

#MISE description="Export kubeconfig from OpenTofu outputs into $HOME/.kube/partials/<provider>-<environment>.yaml"

#USAGE flag "--environment <environment>" help="Deployment environment" {
#USAGE   choices "dev" "preprod" "prod"
#USAGE }
#USAGE flag "--provider <provider>" help="Cloud provider (required: vultr or ovh)" {
#USAGE   choices "vultr" "ovh"
#USAGE }
#USAGE flag "--vars-file <path>" help="Optional path to a .tfvars file (not required, used only for naming)" {
#USAGE }

if [ -z "${usage_provider:-}" ]; then
  echo "Provider is required" >&2
  exit 1
fi
if [ -z "${usage_environment:-}" ]; then
  echo "Environment is required" >&2
  exit 1
fi

# Build output path and ensure directory exists
out_dir="$HOME/.kube/partial"
out_file="$out_dir/${usage_provider}-${usage_environment}.yaml"
mkdir -p "$out_dir"

# Move into tofu/infra to read outputs
cd tofu/infra

# Fetch kubeconfig from tofu outputs (raw)
# Note: This relies on the state in the current directory being initialized & applied.
echo "Exporting kubeconfig to $out_file"
kubeconfig_content=$(tofu output -raw kubeconfig_decoded)

# Basic validation: ensure we got something that looks like a kubeconfig
if [ -z "$kubeconfig_content" ]; then
  echo "No kubeconfig content returned from 'tofu output'. Is the stack applied?" >&2
  exit 2
fi

# Write file with secure permissions
umask 077
printf "%s" "$kubeconfig_content" > "$out_file"
chmod 600 "$out_file"

echo "Kubeconfig written to: $out_file"

# Desired context name (provider-environment)
target_context="${usage_provider}-${usage_environment}"

# Discover the context name to rename using kubectl get-contexts.
# Choose the first listed context name.
old_context=$(kubectl --kubeconfig="$out_file" config get-contexts -o name 2>/dev/null | head -n1)

if [ -z "$old_context" ]; then
  echo "No context entries found in kubeconfig; cannot rename." >&2
  exit 3
fi

if [ -z "$old_context" ]; then
  echo "No context name found in kubeconfig; leaving file as-is (no rename performed)" >&2
else
  echo "Renaming kubeconfig context: '$old_context' -> '$target_context'"

  kubectl --kubeconfig="$out_file" config rename-context "$old_context" "$target_context"
  echo "Context renamed to: $target_context"
fi

